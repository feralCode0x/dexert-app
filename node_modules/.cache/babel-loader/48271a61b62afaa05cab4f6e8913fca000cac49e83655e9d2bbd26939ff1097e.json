{"ast":null,"code":"import { Contract } from 'ethers';\nimport { ERC20Interface } from '../constants';\nimport { useCall } from './useCall';\n/**\n * Returns a balance of a given token for a given address.\n * @param tokenAddress address of a token contract.\n * @param address address of an account.\n * @param queryParams see {@link QueryParams}.\n * @public\n * @returns a balance which is `BigNumber`, or `undefined` if address or token is `Falsy` or not connected.\n * @example\n * const DAI_ADDRESS = '0x6b175474e89094c44da98b954eedeac495271d0f'\n * const { account } = useEthers()\n * const daiBalance = useTokenBalance(DAI_ADDRESS, account)\n *\n * return (\n *   {daiBalance && <p>Dai balance: {formatUnits(daiBalance, 18)} DAI</p>}\n * )\n */\nexport function useTokenBalance(tokenAddress, address, queryParams = {}) {\n  var _a;\n  const {\n    value: tokenBalance\n  } = (_a = useCall(address && tokenAddress && {\n    contract: new Contract(tokenAddress, ERC20Interface),\n    method: 'balanceOf',\n    args: [address]\n  }, queryParams)) !== null && _a !== void 0 ? _a : {};\n  return tokenBalance === null || tokenBalance === void 0 ? void 0 : tokenBalance[0];\n}\n//# sourceMappingURL=useTokenBalance.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}