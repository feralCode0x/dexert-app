{"ast":null,"code":"import { useConfig } from './useConfig';\nimport { useEthers } from './useEthers';\nimport { estimateTransactionGasLimit, usePromiseTransaction } from './usePromiseTransaction';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks/context';\nimport { getSignerFromOptions } from '../helpers/getSignerFromOptions';\nimport { sanitizeTransactionRequest } from '../helpers/gnosisSafeUtils';\n/**\n * Hook returns an object with three variables: `state`, `resetState`, and `sendTransaction`.\n *\n * ``state` represents the status of transaction. See {@link TransactionStatus}.\n *\n * `resetState` can be used to reset the state to `None` after a transaction attempt has either succeeded or failed.\n *\n * To send a transaction use `sendTransaction` function returned by `useSendTransaction`.\n *\n * Function accepts a [Transaction Request](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionRequest) object as a parameter.\n * @public\n * @param options additional options of type {@link TransactionOptions}\n * @returns {} object with two variables: `sendTransaction` and `state`: `{ sendTransaction: (...args: any[]) => void, state: TransactionStatus }`.\n *\n * @example\n * const { sendTransaction, state } = useSendTransaction({ transactionName: 'Send Ethereum' })\n *\n * const handleClick = () => {\n *   ...\n *   sendTransaction({ to: address, value: utils.parseEther(amount) })\n * }\n */\nexport function useSendTransaction(options) {\n  var _a, _b, _c;\n  const {\n    library,\n    chainId\n  } = useEthers();\n  const transactionChainId = options && 'chainId' in options && (options === null || options === void 0 ? void 0 : options.chainId) || chainId;\n  const {\n    promiseTransaction,\n    state,\n    resetState\n  } = usePromiseTransaction(transactionChainId, options);\n  const config = useConfig();\n  const gasLimitBufferPercentage = (_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.gasLimitBufferPercentage) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.bufferGasLimitPercentage) !== null && _b !== void 0 ? _b : config === null || config === void 0 ? void 0 : config.gasLimitBufferPercentage) !== null && _c !== void 0 ? _c : 0;\n  const providers = useReadonlyNetworks();\n  const provider = transactionChainId && providers[transactionChainId];\n  const sendTransaction = async transactionRequest => {\n    var _a, _b, _c;\n    const signer = getSignerFromOptions(provider, options, library);\n    if (signer) {\n      const gasLimit = await estimateTransactionGasLimit(transactionRequest, signer, gasLimitBufferPercentage);\n      const sanitizedTransaction = sanitizeTransactionRequest(Object.assign(Object.assign({}, transactionRequest), {\n        gasLimit\n      }));\n      return promiseTransaction(signer.sendTransaction(sanitizedTransaction), {\n        safeTransaction: {\n          to: sanitizedTransaction.to,\n          value: (_a = sanitizedTransaction.value) === null || _a === void 0 ? void 0 : _a.toString(),\n          data: (_b = sanitizedTransaction.data) === null || _b === void 0 ? void 0 : _b.toString(),\n          safeTxGas: (_c = sanitizedTransaction.gasLimit) === null || _c === void 0 ? void 0 : _c.toString()\n        }\n      }, transactionRequest);\n    }\n  };\n  return {\n    sendTransaction,\n    state,\n    resetState\n  };\n}\n//# sourceMappingURL=useSendTransaction.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}