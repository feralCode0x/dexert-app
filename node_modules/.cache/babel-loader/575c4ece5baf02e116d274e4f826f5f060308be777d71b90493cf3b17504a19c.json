{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { deepEqual } from '../helpers';\nexport function useResolvedPromise(promise) {\n  const [resolvedValue, setResolvedValue] = useState(promise instanceof Promise ? undefined : promise);\n  useEffect(() => {\n    let active = true; // Flag to prevent setting state after component unmounts\n    const resolvePromise = async () => {\n      if (!active) {\n        // We are already loading, don't start another request\n        // or the component has been unmounted\n        return;\n      }\n      // If the input is not a promise, it directly sets the resolved value\n      const value = await promise;\n      // Check if the component is still mounted before setting the state\n      if (active) {\n        if (!deepEqual(resolvedValue, value)) {\n          // Calling setResolvedValue will trigger a rerender, so we only call it if the value has changed\n          setResolvedValue(value);\n        }\n      }\n    };\n    void resolvePromise();\n    return () => {\n      active = false; // Cleanup to prevent state update after component unmounts\n    };\n  }, [promise]); // Rerun effect if the promise changes\n  return resolvedValue;\n}\n//# sourceMappingURL=useResolvedPromise.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}