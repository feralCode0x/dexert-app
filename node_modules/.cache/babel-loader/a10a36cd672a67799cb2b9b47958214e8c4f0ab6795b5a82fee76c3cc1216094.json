{"ast":null,"code":"import { encodeUint, bufPaddedLength, buffLength } from '../common';\nimport { ethersAbi, falseEncoded, trueEncoded } from './constants';\nconst selector = ethersAbi.getSighash('tryAggregate');\nexport function encodeCalls(start, calls) {\n  let res = start;\n  // the first offset is calls.length * 0x20 because the first\n  // item of a dynamic array starts after all offsets\n  let dynamicOffset = calls.length * 0x20;\n  // number of items in the array\n  res += encodeUint(calls.length);\n  for (const call of calls) {\n    // offset of the current call\n    res += encodeUint(dynamicOffset);\n    // offset for the next call - current offset\n    // + length of the current call\n    // + space taken by the current offset\n    // + the first item in the next tuple - address for the next call\n    // + space taken by the offset for the next call data\n    dynamicOffset += 3 * 0x20 + bufPaddedLength(call[1]);\n  }\n  for (const call of calls) {\n    // address + calldata offset\n    dynamicOffset = 0x40;\n    res += '000000000000000000000000' + call[0].slice(2).toLowerCase();\n    res += encodeUint(dynamicOffset);\n    // call data length\n    res += buffLength(call[1]).toString(16).padStart(64, '0');\n    // calldata\n    res += call[1].slice(2).padEnd(bufPaddedLength(call[1]) * 2, '0');\n  }\n  return res;\n}\nexport function encodeTryAggregate(b, calls) {\n  // function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public returns (tuple(bool success, bytes returnData)[])\n  let res = selector;\n  // offset of the array is 0x40 because we need to\n  // encode requireSuccess flag and the offset itself\n  const dynamicOffset = 0x40;\n  res += b ? trueEncoded : falseEncoded;\n  res += encodeUint(dynamicOffset);\n  // encode dynamic array of calls\n  return encodeCalls(res, calls);\n}\n//# sourceMappingURL=encoder.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}