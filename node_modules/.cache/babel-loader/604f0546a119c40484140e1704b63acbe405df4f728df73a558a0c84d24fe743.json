{"ast":null,"code":"import { useMemo } from 'react';\nimport { useRawLogs } from './useRawLogs';\nimport { decodeLogs, encodeFilterData } from '../helpers';\n/**\n * Makes a call to get the logs for a specific contract event and returns the decoded logs or an error if present.\n * The hook will cause the component to refresh when a new block is mined and the returned logs change.\n * A syntax sugar for {@link useRawLogs} that uses ABI, event name, and arguments instead of raw data.\n * @param filter an event filter (see {@link TypedFilter})\n * @param queryParams allows for additional configuration of the query (see {@link LogQueryParams})\n * @returns an array of decoded logs (see {@link LogsResult})\n * @public\n */\nexport function useLogs(filter, queryParams = {}) {\n  const {\n    fromBlock,\n    toBlock,\n    blockHash\n  } = queryParams;\n  const rawFilter = useMemo(() => encodeFilterData(filter, fromBlock, toBlock, blockHash), [filter, fromBlock, toBlock, blockHash]);\n  const result = useRawLogs(rawFilter instanceof Error ? undefined : rawFilter, queryParams);\n  return useMemo(() => decodeLogs(filter, rawFilter instanceof Error ? rawFilter : result), [result, filter, rawFilter]);\n}\n//# sourceMappingURL=useLogs.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}