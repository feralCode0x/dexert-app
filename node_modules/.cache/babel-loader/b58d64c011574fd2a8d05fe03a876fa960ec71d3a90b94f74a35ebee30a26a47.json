{"ast":null,"code":"import { jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { utils } from 'ethers';\nimport { getChainById } from '../helpers';\nimport { useEthers, useBlockNumber, useConfig, useUpdateConfig, useLocalStorage } from '../hooks';\nimport multicallABI from '../constants/abi/MultiCall.json';\nimport multicall2ABI from '../constants/abi/MultiCall2.json';\nimport { deployContract } from '../helpers/contract';\nvar LocalMulticallState;\n(function (LocalMulticallState) {\n  LocalMulticallState[LocalMulticallState[\"Unknown\"] = 0] = \"Unknown\";\n  LocalMulticallState[LocalMulticallState[\"NonLocal\"] = 1] = \"NonLocal\";\n  LocalMulticallState[LocalMulticallState[\"Deploying\"] = 2] = \"Deploying\";\n  LocalMulticallState[LocalMulticallState[\"Deployed\"] = 3] = \"Deployed\";\n  LocalMulticallState[LocalMulticallState[\"Error\"] = 4] = \"Error\";\n})(LocalMulticallState || (LocalMulticallState = {}));\nexport function LocalMulticallProvider({\n  children\n}) {\n  const updateConfig = useUpdateConfig();\n  const {\n    library,\n    chainId\n  } = useEthers();\n  const [, setMulticallAddress, getCurrent] = useLocalStorage('local_multicall_address' + chainId);\n  const {\n    multicallAddresses,\n    multicallVersion\n  } = useConfig();\n  const [localMulticallState, setLocalMulticallState] = useState(LocalMulticallState.Unknown);\n  const [multicallBlockNumber, setMulticallBlockNumber] = useState();\n  const blockNumber = useBlockNumber();\n  useEffect(() => {\n    var _a;\n    if (!library || !chainId) {\n      setLocalMulticallState(LocalMulticallState.Unknown);\n    } else if (!((_a = getChainById(chainId)) === null || _a === void 0 ? void 0 : _a.isLocalChain)) {\n      setLocalMulticallState(LocalMulticallState.NonLocal);\n    } else if (multicallAddresses && multicallAddresses[chainId]) {\n      setLocalMulticallState(LocalMulticallState.Deployed);\n    } else if (localMulticallState !== LocalMulticallState.Deploying) {\n      const checkDeployed = async () => {\n        const multicallAddress = getCurrent();\n        if (typeof multicallAddress === 'string' && utils.isAddress(multicallAddress)) {\n          const multicallCode = await library.getCode(multicallAddress);\n          if (multicallCode !== '0x') {\n            updateConfig({\n              multicallAddresses: {\n                [chainId]: multicallAddress\n              }\n            });\n            return;\n          }\n        }\n        const signer = library && 'getSigner' in library ? library.getSigner() : undefined;\n        if (!signer) {\n          setLocalMulticallState(LocalMulticallState.Error);\n          return;\n        }\n        setLocalMulticallState(LocalMulticallState.Deploying);\n        const deployMulticall = async () => {\n          try {\n            const {\n              contractAddress,\n              blockNumber\n            } = await deployContract(multicallVersion === 1 ? multicallABI : multicall2ABI, signer);\n            updateConfig({\n              multicallAddresses: {\n                [chainId]: contractAddress\n              }\n            });\n            setMulticallAddress(contractAddress);\n            setMulticallBlockNumber(blockNumber);\n            setLocalMulticallState(LocalMulticallState.Deployed);\n          } catch (_a) {\n            setLocalMulticallState(LocalMulticallState.Error);\n          }\n        };\n        void deployMulticall();\n      };\n      void checkDeployed();\n    }\n  }, [library, chainId]);\n  const awaitingMulticallBlock = multicallBlockNumber && blockNumber && blockNumber < multicallBlockNumber;\n  if (localMulticallState === LocalMulticallState.Deploying || localMulticallState === LocalMulticallState.Deployed && awaitingMulticallBlock) {\n    return _jsx(\"div\", {\n      children: \"Deploying multicall...\"\n    });\n  } else if (localMulticallState === LocalMulticallState.Error) {\n    return _jsx(\"div\", {\n      children: \"Error deploying multicall contract\"\n    });\n  } else {\n    return _jsx(_Fragment, {\n      children: children\n    });\n  }\n}\n//# sourceMappingURL=LocalMulticallProvider.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}