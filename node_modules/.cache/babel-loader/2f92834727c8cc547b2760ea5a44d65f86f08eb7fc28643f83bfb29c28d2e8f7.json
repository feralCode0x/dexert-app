{"ast":null,"code":"import { decodeUint, fail, wordLength } from '../common';\nexport function decodeAggregate(calldata) {\n  // function aggregate(tuple(address target, bytes callData)[] calls) public returns (tuple(uint256 blockNumber, bytes returnData)[])\n  const errorMethodId = '0x08c379a0';\n  if (calldata.startsWith(errorMethodId)) {\n    throw new Error('Multicall aggregate: call failed');\n  }\n  calldata = calldata.slice(2); // 'remove 0x prefix'\n  const getNumber = offset => decodeUint(calldata.slice(offset * wordLength, (offset + 1) * wordLength));\n  const blockNumber = getNumber(0);\n  // The array offset must be 0x40 - blockNumber + array offset\n  if (getNumber(1) !== 0x40) {\n    fail();\n  }\n  const arraySize = getNumber(2);\n  const calls = [];\n  for (let i = 0; i < arraySize; i++) {\n    // offset of the call number i\n    const callOffset = 2 * getNumber(i + 3) + 3 * wordLength; // * 2 because 1 byte = 2 chars\n    // position of the call if we split calldata in chunks of 32 bytes\n    const pos = callOffset / wordLength;\n    // returnData is encoded as its length and the data itself\n    const returnDataOffset = (pos + 1) * wordLength;\n    const returnDataLength = getNumber(pos);\n    const returnData = calldata.slice(returnDataOffset, returnDataOffset + 2 * returnDataLength); // * 2 because 1 byte = 2 chars\n    calls.push('0x' + returnData);\n  }\n  return [blockNumber, calls];\n}\n//# sourceMappingURL=decoder.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}