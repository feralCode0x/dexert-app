{"ast":null,"code":"/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function callsReducer(state = [], action) {\n  if (action.type === 'ADD_CALLS') {\n    return [...state, ...action.calls.map(call => Object.assign(Object.assign({}, call), {\n      address: call.address.toLowerCase()\n    }))];\n  } else if (action.type === 'UPDATE_CALLS') {\n    return state.map(call => {\n      if (call.chainId !== action.chainId || !action.updatedCalls.includes(call)) {\n        return call;\n      }\n      const blockNumber = action.blockNumber;\n      return Object.assign(Object.assign({}, call), {\n        lastUpdatedBlockNumber: blockNumber\n      });\n    });\n  } else {\n    let finalState = state;\n    for (const call of action.calls) {\n      const index = finalState.findIndex(x => x.address.toLowerCase() === call.address.toLowerCase() && x.data === call.data);\n      if (index !== -1) {\n        finalState = finalState.filter((_, i) => i !== index);\n      }\n    }\n    return finalState;\n  }\n}\n//# sourceMappingURL=callsReducer.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}