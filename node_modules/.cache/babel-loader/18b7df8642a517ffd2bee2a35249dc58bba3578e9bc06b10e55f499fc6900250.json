{"ast":null,"code":"export function shortenString(str) {\n  return str.substring(0, 6) + '...' + str.substring(str.length - 4);\n}\n/**\n * Determines whether two objects are equal using a deep comparison. Null and undefined are considered equal. Arrays\n * with the same elements are not considered equal if they are in different orders. Objects with the same properties\n * can have different property orderings and still be considered equal.\n * @param obj1 The first object to compare.\n * @param obj2 The second object to compare.\n * @returns True if the objects are deep equal, false otherwise.\n */\nexport function deepEqual(obj1, obj2) {\n  if (obj1 === obj2) return true;\n  if (obj1 == null || obj2 == null) return obj1 == obj2;\n  const obj1Primitive = isPrimitive(obj1);\n  const obj2Primitive = isPrimitive(obj2);\n  if (obj1Primitive || obj2Primitive)\n    // compare primitives\n    return obj1Primitive === obj2Primitive && obj1 === obj2;\n  let obj1KeyCount = 0;\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const _ in obj1) obj1KeyCount++;\n  let obj2KeyCount = 0;\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const _ in obj2) {\n    if (++obj2KeyCount > obj1KeyCount) return false;\n  }\n  if (obj1KeyCount !== obj2KeyCount) return false;\n  // compare objects with same number of keys\n  for (const key in obj1) {\n    if (!(key in obj2)) return false; //other object doesn't have this prop\n    if (!deepEqual(obj1[key], obj2[key])) return false;\n  }\n  return true;\n}\nexport function isPrimitive(obj) {\n  return obj !== Object(obj);\n}\n//# sourceMappingURL=common.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}