{"ast":null,"code":"import { providers } from 'ethers';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { Event } from '../../../../helpers/event';\nconst GET_COINBASE_LINK = 'https://www.coinbase.com/wallet';\nexport async function getCoinbaseProvider() {\n  var _a;\n  if (!window.ethereum) {\n    window.open(GET_COINBASE_LINK);\n    return undefined;\n  }\n  const injectedProviders = (window === null || window === void 0 ? void 0 : window.ethereum.providers) || [];\n  const injectedProvider = (_a = injectedProviders.find(provider => {\n    var _a;\n    return (_a = provider.isWalletLink) !== null && _a !== void 0 ? _a : false;\n  })) !== null && _a !== void 0 ? _a : await detectEthereumProvider();\n  if (!injectedProvider || !injectedProvider.isWalletLink) {\n    console.log(`Coinbase wallet is not installed - you can get it under ${GET_COINBASE_LINK}`);\n    return undefined;\n  }\n  const provider = new providers.Web3Provider(injectedProvider, 'any');\n  return provider;\n}\nexport class CoinbaseWalletConnector {\n  constructor() {\n    this.name = 'CoinbaseWallet';\n    this.update = new Event();\n  }\n  async init() {\n    if (this.provider) return;\n    const metamask = await getCoinbaseProvider();\n    if (!metamask) {\n      return;\n    }\n    this.provider = metamask;\n  }\n  async connectEagerly() {\n    await this.init();\n    if (!this.provider) {\n      return;\n    }\n    try {\n      const chainId = await this.provider.send('eth_chainId', []);\n      const accounts = await this.provider.send('eth_accounts', []);\n      this.update.emit({\n        chainId: parseInt(chainId),\n        accounts\n      });\n    } catch (e) {\n      console.debug(e);\n    }\n  }\n  async activate() {\n    var _a;\n    await this.init();\n    if (!this.provider) {\n      throw new Error('Could not activate connector');\n    }\n    try {\n      const chainId = await this.provider.send('eth_chainId', []);\n      const accounts = await this.provider.send('eth_requestAccounts', []);\n      this.update.emit({\n        chainId: parseInt(chainId),\n        accounts\n      });\n    } catch (e) {\n      console.log(e);\n      throw new Error('Could not activate connector: ' + ((_a = e.message) !== null && _a !== void 0 ? _a : ''));\n    }\n  }\n  async deactivate() {\n    this.provider = undefined;\n  }\n}\n//# sourceMappingURL=coinbase.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}