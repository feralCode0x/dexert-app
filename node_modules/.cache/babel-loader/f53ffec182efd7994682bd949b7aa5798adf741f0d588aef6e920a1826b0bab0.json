{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport LocalStorage from '../helpers/LocalStorage';\nimport { useConfig } from './useConfig';\nfunction getItem(key, storage) {\n  const item = storage.getItem(key);\n  if (item !== null) {\n    try {\n      return JSON.parse(item);\n    } catch (_a) {\n      // ignore error\n    }\n  }\n}\nfunction setItem(key, value, storage) {\n  if (value === undefined) {\n    storage.removeItem(key);\n  } else {\n    const toStore = JSON.stringify(value);\n    try {\n      storage.setItem(key, toStore);\n      return JSON.parse(toStore);\n    } catch (err) {\n      console.error('Error in localStorage', err);\n      storage.removeItem(key);\n    }\n  }\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function useLocalStorage(key) {\n  const {\n    localStorageOverride = typeof window !== 'undefined' ? window.localStorage : new LocalStorage()\n  } = useConfig();\n  const [value, setValue] = useState(() => getItem(key, localStorageOverride));\n  useEffect(() => {\n    setValue(getItem(key, localStorageOverride));\n  }, [key]);\n  useEffect(() => {\n    setItem(key, value, localStorageOverride);\n  }, [value]);\n  // As value updating relies on useEffect, it takes multiple rerenders to fully update the value.\n  // The third element in the return array allows to get the immediate value stored in the localStorage.\n  return [value, setValue, () => getItem(key, localStorageOverride)];\n}\n//# sourceMappingURL=useLocalStorage.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}