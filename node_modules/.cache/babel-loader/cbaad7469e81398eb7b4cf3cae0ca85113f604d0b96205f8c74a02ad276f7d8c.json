{"ast":null,"code":"export const DEFAULT_OPTIONS = {\n  decimals: 0,\n  thousandSeparator: ',',\n  decimalSeparator: '.',\n  significantDigits: Infinity,\n  useFixedPrecision: false,\n  fixedPrecisionDigits: 0,\n  prefix: '',\n  suffix: ''\n};\nconst INPUT_REGEX = /^\\d*$/;\nexport function formatCurrency(options, value) {\n  if (!INPUT_REGEX.test(value)) {\n    throw new TypeError('Invalid input, decimal string expected.');\n  }\n  const number = formatNumber(options, value);\n  return [options.prefix, number, options.suffix].join('');\n}\nfunction formatNumber(options, value) {\n  const integer = getIntegerPart(value, options.decimals);\n  const thousands = splitThousands(integer, options.thousandSeparator);\n  const decimal = getDecimalPart(value, options.decimals);\n  const digits = options.useFixedPrecision ? toFixed(decimal, options.fixedPrecisionDigits) : toSignificant(decimal, integer.length, options.significantDigits);\n  return joinDecimals(thousands, digits, options.decimalSeparator);\n}\nfunction getIntegerPart(value, decimals) {\n  if (value.length <= decimals) {\n    return '0';\n  } else {\n    const fragment = value.substring(0, value.length - decimals);\n    return stripFrontZeroes(fragment);\n  }\n}\nfunction stripFrontZeroes(value) {\n  const stripped = value.replace(/^0+/, '');\n  return stripped || '0';\n}\nfunction splitThousands(value, separator) {\n  const count = value.length / 3;\n  const resultValue = value.split('');\n  for (let i = 1; i < count; i++) {\n    resultValue.splice(-4 * i + 1, 0, separator);\n  }\n  return resultValue.join('');\n}\nfunction getDecimalPart(value, decimals) {\n  if (value.length <= decimals) {\n    return value.padStart(decimals, '0');\n  } else {\n    return value.substring(value.length - decimals);\n  }\n}\nfunction joinDecimals(integer, decimals, separator) {\n  if (!decimals) {\n    return integer;\n  } else {\n    return `${integer}${separator}${decimals}`;\n  }\n}\nfunction toSignificant(decimal, integerLength, significantDigits) {\n  const length = significantDigits - integerLength;\n  if (length > decimal.length) {\n    return stripEndZeroes(decimal);\n  } else {\n    return stripEndZeroes(decimal.substring(0, length));\n  }\n}\nfunction stripEndZeroes(value) {\n  return value.replace(/0+$/, '');\n}\nfunction toFixed(decimal, fixedPrecisionDigits) {\n  if (fixedPrecisionDigits > decimal.length) {\n    return decimal.padEnd(fixedPrecisionDigits, '0');\n  } else {\n    return decimal.substring(0, fixedPrecisionDigits);\n  }\n}\n//# sourceMappingURL=formatting.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}