{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { Contract } from 'ethers';\n/**\n * `useLookupAddress` is a hook that is used to retrieve the ENS (e.g. `name.eth`) or Rave Names (e.g. `name.ftm`) for a specific address.\n * @param address address to lookup\n * @param options additional options\n * @returns {} Object with the following:\n  - `ens: string | null | undefined` - ENS or Rave name of the account or null if not found.\n  - `isLoading: boolean` - indicates whether the lookup is in progress.\n  - `error: Error | null` - error that occurred during the lookup or null if no error occurred.\n * @public\n * @example\n * const { account } = useEthers()\n * const { ens } = useLookupAddress(account)\n *\n * return (\n *   <p>Account: {ens ?? account}</p>\n * )\n */\nexport function useLookupAddress(address, {\n  rave\n} = {}) {\n  const {\n    library\n  } = useEthers();\n  const [ens, setENS] = useState();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    let mounted = true;\n    void (async () => {\n      if (!library || !address) return;\n      try {\n        setIsLoading(true);\n        if (rave) {\n          const raveContract = new Contract('0x14Ffd1Fa75491595c6FD22De8218738525892101', [{\n            inputs: [{\n              internalType: 'address',\n              name: 'owner',\n              type: 'address'\n            }, {\n              internalType: 'uint256',\n              name: 'index',\n              type: 'uint256'\n            }],\n            name: 'getName',\n            outputs: [{\n              internalType: 'string',\n              name: '',\n              type: 'string'\n            }],\n            stateMutability: 'view',\n            type: 'function'\n          }], library);\n          // this call will fail anyway if the chain isn't Fantom, so we don't need an extra chainId check\n          const resolved = await raveContract.getName(address, 0);\n          if (!mounted) return;\n          setENS(resolved);\n        } else {\n          const resolved = await library.lookupAddress(address);\n          if (!mounted) return;\n          setENS(resolved);\n        }\n      } catch (e) {\n        if (!mounted) return;\n        setError(e);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n    return () => {\n      mounted = false;\n    };\n  }, [address, library]);\n  return {\n    ens,\n    isLoading,\n    error\n  };\n}\n//# sourceMappingURL=useLookupAddress.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}