{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { subscribeToNewBlock, useReadonlyNetworks, useWindow } from '../providers';\nimport { useConnector } from '../providers/network/connectors';\nimport { useChainId } from './useChainId';\nimport { useDebounce } from './useDebounce';\nimport { useIsMounted } from './useIsMounted';\n/**\n * Get the current block number.\n * Will update automatically when the new block is mined.\n * @public\n */\nexport function useBlockNumber() {\n  const chainId = useChainId();\n  const readOnlyNetworks = useReadonlyNetworks();\n  const {\n    connector\n  } = useConnector();\n  const [blockNumber, setBlockNumber] = useState();\n  const isActive = useWindow();\n  const isMounted = useIsMounted();\n  useEffect(() => {\n    if (!isActive) {\n      return;\n    }\n    const readOnlyNetwork = chainId && readOnlyNetworks[chainId];\n    if (readOnlyNetwork) {\n      const unsub = subscribeToNewBlock(readOnlyNetwork, chainId, ({\n        blockNumber\n      }) => {\n        if (isMounted()) {\n          setBlockNumber(blockNumber);\n        }\n      }, isActive);\n      return () => unsub();\n    }\n    if (!connector) {\n      return;\n    }\n    const unsub = connector.newBlock.on(blockNumber => {\n      if (isMounted()) {\n        setBlockNumber(blockNumber);\n      }\n    });\n    return () => unsub();\n  }, [isActive, readOnlyNetworks, connector, chainId]);\n  const debouncedBlockNumber = useDebounce(blockNumber, 100);\n  return debouncedBlockNumber;\n}\n//# sourceMappingURL=useBlockNumber.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}