{"ast":null,"code":"/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function warnOnInvalidFilter(filter) {\n  if (!filter) {\n    return;\n  }\n  const {\n    contract,\n    event,\n    args\n  } = filter;\n  console.warn(`Invalid contract filter: address=${contract.address} event=${event} args=${args}`);\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function encodeFilterData(filter, fromBlock, toBlock, blockHash) {\n  if (!filter) {\n    return undefined;\n  }\n  const {\n    contract,\n    event,\n    args\n  } = filter;\n  if (!contract.address || !event) {\n    warnOnInvalidFilter(filter);\n    return undefined;\n  }\n  try {\n    const encodedTopics = contract.interface.encodeFilterTopics(event, args);\n    if (blockHash) {\n      return {\n        address: contract.address,\n        topics: encodedTopics,\n        blockHash: blockHash\n      };\n    } else {\n      return {\n        address: contract.address,\n        topics: encodedTopics,\n        fromBlock: fromBlock !== null && fromBlock !== void 0 ? fromBlock : 0,\n        toBlock: toBlock !== null && toBlock !== void 0 ? toBlock : 'latest'\n      };\n    }\n  } catch (e) {\n    if (e instanceof Error) {\n      return e;\n    } else {\n      warnOnInvalidFilter(filter);\n      return undefined;\n    }\n  }\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function decodeLogs(filter, result) {\n  if (!result || !filter) {\n    return undefined;\n  }\n  try {\n    if (result instanceof Error) {\n      return {\n        value: undefined,\n        error: result\n      };\n    }\n    const decodedLogs = [];\n    for (const log of result) {\n      const data = filter.contract.interface.decodeEventLog(filter.event, log.data, log.topics);\n      decodedLogs.push({\n        data,\n        blockNumber: log.blockNumber,\n        blockHash: log.blockHash,\n        transactionIndex: log.transactionIndex,\n        transactionHash: log.transactionHash,\n        removed: log.removed\n      });\n    }\n    return {\n      value: decodedLogs,\n      error: undefined\n    };\n  } catch (error) {\n    return {\n      value: undefined,\n      error: error\n    };\n  }\n}\n//# sourceMappingURL=logs.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}