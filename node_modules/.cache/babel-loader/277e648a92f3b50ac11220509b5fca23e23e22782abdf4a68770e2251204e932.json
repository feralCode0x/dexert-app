{"ast":null,"code":"import { abis } from \"@my-app/contracts\";\nimport { getPairsInfo } from \"./getPairsInfo\";\n//import { UniswapV2Factory, UNISWAP_V2_FACTORY_ADDRESS, UniswapFactoryInterface } from '../constants'\n//import { ethers } from 'ethers'\n\nexport const getFactoryInfo = async (factoryAddress, web3) => {\n  //const factory = new ethers.ContractFactory(UniswapV2Factory.abi, UniswapV2Factory.bytecode, UNISWAP_V2_FACTORY_ADDRESS);\n  const factory = new web3.eth.Contract(abis.factory, factoryAddress);\n  const factoryInfo = {\n    feeTo: await factory.methods.feeTo().call(),\n    feeToSetter: await factory.methods.feeToSetter().call(),\n    allPairsLength: await factory.methods.allPairsLength().call(),\n    allPairs: []\n  };\n  for (let i = 0; i < factoryInfo.allPairsLength; i++) {\n    factoryInfo.allPairs[i] = await factoryInfo.methods.allPairs(i).call();\n  }\n  factoryInfo.pairsInfo = await getPairsInfo(factoryInfo.allPairs, web3);\n  return factoryInfo;\n};","map":{"version":3,"names":["abis","getPairsInfo","getFactoryInfo","factoryAddress","web3","factory","eth","Contract","factoryInfo","feeTo","methods","call","feeToSetter","allPairsLength","allPairs","i","pairsInfo"],"sources":["/home/zetecoder/dexert0/packages/dexert/src/utils/getFactoryInfo.js"],"sourcesContent":["import { abis } from \"@my-app/contracts\";\nimport { getPairsInfo } from \"./getPairsInfo\";\n//import { UniswapV2Factory, UNISWAP_V2_FACTORY_ADDRESS, UniswapFactoryInterface } from '../constants'\n//import { ethers } from 'ethers'\n\nexport const getFactoryInfo = async (factoryAddress, web3) => {\n  //const factory = new ethers.ContractFactory(UniswapV2Factory.abi, UniswapV2Factory.bytecode, UNISWAP_V2_FACTORY_ADDRESS);\n  const factory = new web3.eth.Contract(abis.factory, factoryAddress);\n  const factoryInfo = {\n    feeTo: await factory.methods.feeTo().call(),\n    feeToSetter: await factory.methods.feeToSetter().call(),\n    allPairsLength: await factory.methods.allPairsLength().call(),\n    allPairs: [],\n  };\n\n  for (let i = 0; i < factoryInfo.allPairsLength; i++) {\n    factoryInfo.allPairs[i] = await factoryInfo.methods.allPairs(i).call();\n  }\n\n  factoryInfo.pairsInfo = await getPairsInfo(factoryInfo.allPairs, web3);\n\n  return factoryInfo;\n}"],"mappings":"AAAA,SAASA,IAAI,QAAQ,mBAAmB;AACxC,SAASC,YAAY,QAAQ,gBAAgB;AAC7C;AACA;;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAOC,cAAc,EAAEC,IAAI,KAAK;EAC5D;EACA,MAAMC,OAAO,GAAG,IAAID,IAAI,CAACE,GAAG,CAACC,QAAQ,CAACP,IAAI,CAACK,OAAO,EAAEF,cAAc,CAAC;EACnE,MAAMK,WAAW,GAAG;IAClBC,KAAK,EAAE,MAAMJ,OAAO,CAACK,OAAO,CAACD,KAAK,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC;IAC3CC,WAAW,EAAE,MAAMP,OAAO,CAACK,OAAO,CAACE,WAAW,CAAC,CAAC,CAACD,IAAI,CAAC,CAAC;IACvDE,cAAc,EAAE,MAAMR,OAAO,CAACK,OAAO,CAACG,cAAc,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC;IAC7DG,QAAQ,EAAE;EACZ,CAAC;EAED,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,WAAW,CAACK,cAAc,EAAEE,CAAC,EAAE,EAAE;IACnDP,WAAW,CAACM,QAAQ,CAACC,CAAC,CAAC,GAAG,MAAMP,WAAW,CAACE,OAAO,CAACI,QAAQ,CAACC,CAAC,CAAC,CAACJ,IAAI,CAAC,CAAC;EACxE;EAEAH,WAAW,CAACQ,SAAS,GAAG,MAAMf,YAAY,CAACO,WAAW,CAACM,QAAQ,EAAEV,IAAI,CAAC;EAEtE,OAAOI,WAAW;AACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}