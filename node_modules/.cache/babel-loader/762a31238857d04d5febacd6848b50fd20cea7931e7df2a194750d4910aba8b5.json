{"ast":null,"code":"import { Contract } from 'ethers';\nimport { decodeTryAggregate, encodeTryAggregate } from '../../../abi/multicall2';\nconst ABI = ['function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public view returns (tuple(bool success, bytes returnData)[])'];\n/**\n * @public\n */\nexport const multicall2Factory = fastEncoding => fastEncoding ? fastEncodingMulticall2 : multicall2;\n/**\n * @public\n */\nexport async function multicall2(provider, address, blockNumber, requests) {\n  if (requests.length === 0) {\n    return {};\n  }\n  const contract = new Contract(address, ABI, provider);\n  const results = await contract.tryAggregate(false, requests.map(({\n    address,\n    data\n  }) => [address, data]), {\n    blockTag: blockNumber\n  });\n  return decodeResult(results, requests);\n}\n/**\n * @public\n */\nexport async function fastEncodingMulticall2(provider, address, blockNumber, requests) {\n  if (requests.length === 0) {\n    return {};\n  }\n  const response = await provider.call({\n    to: address,\n    data: encodeTryAggregate(false, requests.map(({\n      address,\n      data\n    }) => [address, data]))\n  }, blockNumber);\n  const [results] = decodeTryAggregate(response);\n  return decodeResult(results, requests);\n}\nfunction decodeResult(results, requests) {\n  var _a;\n  const state = {};\n  for (let i = 0; i < requests.length; i++) {\n    const {\n      address,\n      data\n    } = requests[i];\n    const [success, value] = results[i];\n    const stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n    stateForAddress[data] = {\n      success,\n      value\n    };\n    state[address] = stateForAddress;\n  }\n  return state;\n}\n//# sourceMappingURL=multicall2.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}