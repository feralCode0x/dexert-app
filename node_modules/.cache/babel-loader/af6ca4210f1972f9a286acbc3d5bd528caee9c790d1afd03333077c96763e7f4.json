{"ast":null,"code":"import { utils, constants } from 'ethers';\nimport { getChainById } from './chain';\nexport const GNOSIS_SAFE_ABI = ['function nonce() view returns (uint256)', 'event ExecutionSuccess(bytes32 txHash, uint256 payment)'];\nexport const buildSafeTransaction = template => {\n  return {\n    to: template.to,\n    value: template.value || 0,\n    data: template.data || '0x',\n    operation: template.operation || 0,\n    safeTxGas: template.safeTxGas || 0,\n    baseGas: template.baseGas || 0,\n    gasPrice: template.gasPrice || 0,\n    gasToken: template.gasToken || constants.AddressZero,\n    refundReceiver: template.refundReceiver || constants.AddressZero,\n    nonce: template.nonce || 0\n  };\n};\nconst EIP712_SAFE_TX_TYPE = {\n  SafeTx: [{\n    type: 'address',\n    name: 'to'\n  }, {\n    type: 'uint256',\n    name: 'value'\n  }, {\n    type: 'bytes',\n    name: 'data'\n  }, {\n    type: 'uint8',\n    name: 'operation'\n  }, {\n    type: 'uint256',\n    name: 'safeTxGas'\n  }, {\n    type: 'uint256',\n    name: 'baseGas'\n  }, {\n    type: 'uint256',\n    name: 'gasPrice'\n  }, {\n    type: 'address',\n    name: 'gasToken'\n  }, {\n    type: 'address',\n    name: 'refundReceiver'\n  }, {\n    type: 'uint256',\n    name: 'nonce'\n  }]\n};\nexport const sanitizeTransactionRequest = transactionRequest => {\n  var _a;\n  return Object.assign(Object.assign({}, transactionRequest), {\n    data: (_a = transactionRequest.data) !== null && _a !== void 0 ? _a : '0x'\n  });\n};\nexport const calculateSafeTransactionHash = (safe, safeTx, chainId) => {\n  // TODO: Remove after WalletConnectV2 fix\n  // WalletConnectV2 incorrectly passes safeTxGas value, equal 0 (default value).\n  // Thus we have a mismatch between gnosis safeTxHash and one calculated by useDApp (safeTxGas is based on estimation)\n  safeTx = Object.assign(Object.assign({}, safeTx), {\n    safeTxGas: 0\n  });\n  return utils._TypedDataEncoder.hash({\n    verifyingContract: safe.address,\n    chainId\n  }, EIP712_SAFE_TX_TYPE, safeTx);\n};\nexport const getLatestNonce = async (chainId, safeAddress) => {\n  var _a, _b, _c;\n  try {\n    const response = await fetch(`https://safe-transaction.${(_a = getChainById(chainId)) === null || _a === void 0 ? void 0 : _a.chainName}.gnosis.io/api/v1/safes/${safeAddress}/all-transactions?limit=1&executed=false&queued=true`);\n    if (!response.ok) return null;\n    const allTransactions = await response.json();\n    const latestNonce = (_c = (_b = allTransactions === null || allTransactions === void 0 ? void 0 : allTransactions.results) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.nonce;\n    if (!latestNonce) return null;\n    return latestNonce;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\nexport const waitForSafeTransaction = async (transactionPromise, contract, chainId, safeTx) => {\n  const safeTxHash = calculateSafeTransactionHash(contract, safeTx, chainId);\n  return new Promise((resolve, reject) => {\n    void transactionPromise.catch(err => {\n      if ((err === null || err === void 0 ? void 0 : err.message) === 'Transaction was rejected') {\n        reject(err);\n      }\n    });\n    const onExecutionSuccess = async (txHash, _payment, event) => {\n      if (txHash === safeTxHash) {\n        contract.removeListener('ExecutionSuccess', onExecutionSuccess);\n        const transaction = await event.getTransaction();\n        const receipt = await event.getTransactionReceipt();\n        resolve({\n          transaction,\n          receipt,\n          rejected: false\n        });\n      } else {\n        const currentNonce = await contract.nonce();\n        if (Number(currentNonce) > Number(safeTx.nonce)) {\n          contract.removeListener('ExecutionSuccess', onExecutionSuccess);\n          const transaction = await event.getTransaction();\n          const receipt = await event.getTransactionReceipt();\n          resolve({\n            transaction,\n            receipt,\n            rejected: true\n          });\n        }\n      }\n    };\n    contract.on('ExecutionSuccess', onExecutionSuccess);\n  });\n};\n//# sourceMappingURL=gnosisSafeUtils.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}