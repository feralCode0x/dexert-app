{"ast":null,"code":"import { BigNumber } from 'ethers';\n/**\n * The `CurrencyValue` class represents a value tied to a currency. The methods include:\n * - `static fromString(currency, value)` - creates a new CurrencyValue from string.\n * - `static zero(currency)` - creates a new CurrencyValue equal to 0.\n * - `toString()` - returns the value of the CurrencyValue as a decimal string with no formatting.\n * - `format(overrideOptions?)` - formats the value according to the currency. The caller can override the formatting options.\n * - `map(fn)` - returns a new CurrencyValue with value transformed by the callback.\n * - `add(other)` - returns a new CurrencyValue with value being the sum of this value and other value. The argument must be a CurrencyValue with the same Currency.\n * - `sub(other)` - returns a new CurrencyValue with value being the difference of this value and other value. The argument must be a CurrencyValue with the same Currency.\n * - `mul(value)` - returns a new CurrencyValue with value multiplied by the argument.\n * - `div(value)` - returns a new CurrencyValue with value divided by the argument.\n * - `mod(value)` - returns a new CurrencyValue with value modulo the argument.\n * - `equals(other)` - performs an equality check on the currencies and the values of both objects.\n * - `lt(other)` - checks if this value is less than the other value. The argument must be a CurrencyValue with the same Currency.\n * - `lte(other)` - checks if this value is less than or equal to the other value. The argument must be a CurrencyValue with the same Currency.\n * - `gt(other)` - checks if this value is greater than the other value. The argument must be a CurrencyValue with the same Currency.\n * - `gte(other)` - checks if this value is greater than or equal to the other value. The argument must be a CurrencyValue with the same Currency.\n * - `isZero()` - returns true if the value is zero.\n *\n * @public\n */\nexport class CurrencyValue {\n  constructor(currency, value) {\n    this.currency = currency;\n    this.value = value;\n  }\n  static fromString(currency, value) {\n    return new CurrencyValue(currency, BigNumber.from(value));\n  }\n  static zero(currency) {\n    return new CurrencyValue(currency, BigNumber.from(0));\n  }\n  toString() {\n    return this.value.toString();\n  }\n  format(overrideOptions = {}) {\n    return this.currency.format(this.value.toString(), overrideOptions);\n  }\n  checkCurrency(other) {\n    if (this.currency !== other.currency) {\n      throw new TypeError(`Currency mismatch ${this.currency.ticker} != ${other.currency.ticker}`);\n    }\n  }\n  map(fn) {\n    return new CurrencyValue(this.currency, fn(this.value));\n  }\n  add(other) {\n    this.checkCurrency(other);\n    return this.map(x => x.add(other.value));\n  }\n  sub(other) {\n    this.checkCurrency(other);\n    return this.map(x => x.sub(other.value));\n  }\n  mul(value) {\n    return this.map(x => x.mul(value));\n  }\n  div(value) {\n    return this.map(x => x.div(value));\n  }\n  mod(value) {\n    return this.map(x => x.mod(value));\n  }\n  equals(other) {\n    return this.currency === other.currency && this.value.eq(other.value);\n  }\n  lt(other) {\n    this.checkCurrency(other);\n    return this.value.lt(other.value);\n  }\n  lte(other) {\n    this.checkCurrency(other);\n    return this.value.lte(other.value);\n  }\n  gt(other) {\n    this.checkCurrency(other);\n    return this.value.gt(other.value);\n  }\n  gte(other) {\n    this.checkCurrency(other);\n    return this.value.gte(other.value);\n  }\n  isZero() {\n    return this.value.isZero();\n  }\n}\n//# sourceMappingURL=CurrencyValue.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}