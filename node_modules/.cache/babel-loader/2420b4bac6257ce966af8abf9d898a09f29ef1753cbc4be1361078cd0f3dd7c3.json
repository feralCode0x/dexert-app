{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useReducer } from 'react';\nimport { useDebounce } from '../../../hooks';\nimport { useReadonlyNetworks } from '../../network';\nimport { BlockNumbersContext } from './context';\nimport { blockNumberReducer } from '../common/reducer';\nimport { subscribeToNewBlock } from '../common/subscribeToNewBlock';\nimport { useWindow } from '../../window';\nimport { useIsMounted } from '../../../hooks/useIsMounted';\nexport function BlockNumbersProvider({\n  children\n}) {\n  const networks = useReadonlyNetworks();\n  const [state, dispatch] = useReducer(blockNumberReducer, {});\n  const isActive = useWindow();\n  const isMounted = useIsMounted();\n  useEffect(() => {\n    const onUnmount = Object.entries(networks).map(([chainId, provider]) => subscribeToNewBlock(provider, Number(chainId), (...args) => {\n      if (isMounted()) {\n        dispatch(...args);\n      }\n    }, isActive));\n    return () => onUnmount.forEach(fn => fn());\n  }, [networks]);\n  const debouncedState = useDebounce(state, 100);\n  return _jsx(BlockNumbersContext.Provider, {\n    value: debouncedState,\n    children: children\n  });\n}\n//# sourceMappingURL=provider.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}