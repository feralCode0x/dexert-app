{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * `useResolveName` is a hook that is used to resolve an ENS name (e.g. `name.eth`) to a specific address.\n * @param name ENS name to be resolved\n * @returns {} Object with the following:\n  - `address: string | null | undefined` - resolved address for the given ENS name or null if not found.\n  - `isLoading: boolean` - indicates whether the lookup is in progress.\n  - `error: Error | null` - error that occurred during the lookup or null if no error occurred.\n * @public\n */\nexport const useResolveName = name => {\n  const {\n    library\n  } = useEthers();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [address, setAddress] = useState();\n  useEffect(() => {\n    let mounted = true;\n    void (async () => {\n      if (!library || !name) return;\n      try {\n        setIsLoading(true);\n        const resolved = await library.resolveName(name);\n        if (!mounted) return;\n        setAddress(resolved);\n      } catch (e) {\n        if (!mounted) return;\n        setError(e);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n    return () => {\n      mounted = false;\n    };\n  }, [library, name]);\n  return {\n    address,\n    isLoading,\n    error\n  };\n};\n//# sourceMappingURL=useResolveName.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}