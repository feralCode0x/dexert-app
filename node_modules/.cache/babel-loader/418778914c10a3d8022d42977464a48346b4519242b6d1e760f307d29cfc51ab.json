{"ast":null,"code":"import { DEFAULT_SUPPORTED_CHAINS } from '../../../constants';\nimport { subscribeToProviderEvents } from '../../../helpers';\nimport { Event } from '../../../helpers/event';\nimport { getAddNetworkParams } from '../../../helpers/getAddNetworkParams';\nimport { validateArguments } from '../../../helpers/validateArgument';\nimport { DEFAULT_CONFIG } from '../../../model/config/default';\nimport { MetamaskConnector } from './implementations';\nexport class ConnectorController {\n  constructor(connector, config = DEFAULT_CONFIG) {\n    this.connector = connector;\n    this.updated = new Event();\n    this.newBlock = new Event();\n    this.active = false;\n    this.accounts = [];\n    this.errors = [];\n    this._config = Object.assign({}, config);\n    this._connectorUnsubscribe = connector.update.on(({\n      chainId,\n      accounts\n    }) => {\n      this.chainId = chainId;\n      this.accounts = accounts;\n      this.emitUpdate();\n    });\n  }\n  emitUpdate() {\n    this.updated.emit({\n      active: this.active,\n      chainId: this.chainId,\n      accounts: this.accounts,\n      blockNumber: this.blockNumber,\n      errors: this.errors\n    });\n  }\n  updateConfig(config) {\n    this._config = Object.assign(Object.assign({}, this._config), config);\n  }\n  getProvider() {\n    return this.connector.provider;\n  }\n  async activate(connectorActivator = connector => connector.activate()) {\n    await connectorActivator(this.connector);\n    const provider = this.getProvider();\n    if (!provider) {\n      throw new Error('Failed to activate connector');\n    }\n    this.clearSubscriptions = subscribeToProviderEvents(this.connector, ({\n      chainId,\n      accounts\n    }) => {\n      if (chainId !== undefined) {\n        this.chainId = chainId;\n      }\n      if (accounts !== undefined) {\n        this.accounts = accounts;\n      }\n      this.emitUpdate();\n    }, () => {\n      if (this.connector instanceof MetamaskConnector && this._config.noMetamaskDeactivate) {\n        return;\n      }\n      void this.deactivate();\n    });\n    this.blockNumber = await provider.getBlockNumber();\n    this.newBlock.emit(this.blockNumber);\n    this.removeBlockEffect = this.newBlock.addEffect(() => {\n      const listener = blockNumber => {\n        this.blockNumber = blockNumber;\n        this.newBlock.emit(blockNumber);\n        this.emitUpdate();\n      };\n      provider.on('block', listener);\n      return () => {\n        provider.off('block', listener);\n      };\n    });\n    this.active = true;\n    this.emitUpdate();\n  }\n  async deactivate() {\n    var _a, _b, _c;\n    this.active = false;\n    (_a = this.removeBlockEffect) === null || _a === void 0 ? void 0 : _a.call(this);\n    (_b = this.clearSubscriptions) === null || _b === void 0 ? void 0 : _b.call(this);\n    (_c = this._connectorUnsubscribe) === null || _c === void 0 ? void 0 : _c.call(this);\n    await this.connector.deactivate();\n    this.chainId = undefined;\n    this.accounts = [];\n    this.blockNumber = undefined;\n    this.errors = [];\n    this.emitUpdate();\n  }\n  async switchNetwork(chainId) {\n    var _a;\n    const provider = this.getProvider();\n    validateArguments({\n      chainId\n    }, {\n      chainId: 'number'\n    });\n    if (!provider) {\n      throw new Error('Connector not initialized');\n    }\n    try {\n      await provider.send('wallet_switchEthereumChain', [{\n        chainId: `0x${chainId.toString(16)}`\n      }]);\n    } catch (error) {\n      const errChainNotAddedYet = 4902; // Metamask error code\n      if (error.code === errChainNotAddedYet) {\n        const chain = ((_a = this._config.networks) !== null && _a !== void 0 ? _a : DEFAULT_SUPPORTED_CHAINS).find(chain => chain.chainId === chainId);\n        if (!chain) throw new Error(`ChainId \"${chainId}\" not found in config.networks. See https://usedapp-docs.netlify.app/docs/Guides/Transactions/Switching%20Networks`);\n        if (!chain.rpcUrl) throw new Error(`ChainId \"${chainId}\" does not have RPC url configured by default. See https://usedapp-docs.netlify.app/docs/Guides/Transactions/Switching%20Networks`);\n        await provider.send('wallet_addEthereumChain', [getAddNetworkParams(chain)]);\n      } else {\n        throw error;\n      }\n    }\n  }\n  reportError(error) {\n    this.errors.push(error);\n    this.emitUpdate();\n  }\n}\n//# sourceMappingURL=connectorController.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}