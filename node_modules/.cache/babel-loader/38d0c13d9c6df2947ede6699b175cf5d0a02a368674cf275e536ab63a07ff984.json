{"ast":null,"code":"import { useMemo } from 'react';\nimport { useNotificationsContext } from '../providers';\nimport { useEthers } from './useEthers';\nimport { useInterval } from './useInterval';\nimport { useConfig } from '../hooks';\nfunction getExpiredNotifications(notifications, expirationPeriod) {\n  if (expirationPeriod === 0) {\n    return [];\n  }\n  const timeFromCreation = creationTime => Date.now() - creationTime;\n  return notifications.filter(notification => timeFromCreation(notification.submittedAt) >= expirationPeriod);\n}\n/**\n * ``useNotifications`` is a hook that is used to access notifications.\n * Notifications include information about: new transactions, transaction success or failure, as well as connection to a new wallet.\n *\n * To use this hook call:\n *\n * ```tsx\n *   const { notifications } = useNotifications()\n * ```\n *\n * `notifications` is an array of `NotificationPayload`.\n *\n * Each notification is removed from `notifications` after time declared in\n * `config.notifications.expirationPeriod`\n *\n * Each can be one of the following:\n *\n * ```tsx\n *   {\n *     type: 'walletConnected';\n *     address: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionStarted';\n *     submittedAt: number\n *     transaction: TransactionResponse;\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionSucceed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionFailed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * @public\n * @see [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse)\n * @see [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt)\n */\nexport function useNotifications() {\n  const {\n    chainId,\n    account\n  } = useEthers();\n  const {\n    addNotification,\n    notifications,\n    removeNotification\n  } = useNotificationsContext();\n  const {\n    notifications: {\n      checkInterval,\n      expirationPeriod\n    }\n  } = useConfig();\n  const chainNotifications = useMemo(() => {\n    var _a;\n    if (chainId === undefined || !account) {\n      return [];\n    }\n    return (_a = notifications[chainId]) !== null && _a !== void 0 ? _a : [];\n  }, [notifications, chainId, account]);\n  useInterval(() => {\n    if (!chainId) {\n      return;\n    }\n    const expiredNotification = getExpiredNotifications(chainNotifications, expirationPeriod);\n    for (const notification of expiredNotification) {\n      removeNotification({\n        notificationId: notification.id,\n        chainId\n      });\n    }\n  }, checkInterval);\n  return {\n    notifications: chainNotifications,\n    addNotification,\n    removeNotification\n  };\n}\n//# sourceMappingURL=useNotifications.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}