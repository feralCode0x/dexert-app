{"ast":null,"code":"import { useConfig } from './useConfig';\nimport { useCallback, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { estimateContractFunctionGasLimit, usePromiseTransaction } from './usePromiseTransaction';\nimport { useReadonlyNetworks } from '../providers';\nimport { getSignerFromOptions } from '../helpers/getSignerFromOptions';\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function connectContractToSigner(contract, options, librarySigner) {\n  if (contract.signer) {\n    return contract;\n  }\n  if (options && 'signer' in options) {\n    return contract.connect(options.signer);\n  }\n  if (librarySigner) {\n    return contract.connect(librarySigner);\n  }\n  throw new TypeError('No signer available in contract, options or library');\n}\n/**\n * Hook returns an object with four variables: ``state`` , ``send``, ``events`` , and ``resetState``.\n *\n * The `state` represents the status of transaction. See {@link TransactionStatus}.\n *\n * `resetState` can be used to reset the state to `None` after a transaction attempt has either succeeded or failed.\n *\n * The `events` is a array of parsed transaction events of type [LogDescription](https://docs.ethers.io/v5/api/utils/abi/interface/#LogDescription).\n *\n * To send a transaction use `send` function returned by `useContractFunction`.\n * The function forwards arguments to ethers.js contract object, so that arguments map 1 to 1 with Solidity function arguments.\n * Additionally, there can be one extra argument - [TransactionOverrides](https://docs.ethers.io/v5/api/contract/contract/#contract-functionsSend), which can be used to manipulate transaction parameters like gasPrice, nonce, etc\n *\n * If typechain contract is supplied as contract parameter then function name and send arguments will be type checked.\n * More on type checking [here](https://usedapp-docs.netlify.app/docs/Guides/Reading/Typechain).\n * @public\n * @param contract contract which function is to be called , also see [Contract](https://docs.ethers.io/v5/api/contract/contract/)\n * @param functionName name of function to call\n * @param options additional options of type {@link TransactionOptions}\n * @returns {} object with variables: `send` , `state` , `events`: `{ send: (...args: any[]) => void, state: TransactionStatus, events: LogDescription[] }`.\n *\n * @example\n * const { state, send } = useContractFunction(contract, 'deposit', { transactionName: 'Wrap' })\n *\n * const depositEther = (etherAmount: string) => {\n *   send({ value: utils.parseEther(etherAmount) })\n * }\n * @example\n * const { state, send } = useContractFunction(contract, 'withdraw', { transactionName: 'Unwrap' })\n *\n * const withdrawEther = (wethAmount: string) => {\n *   send(utils.parseEther(wethAmount))\n * }\n */\nexport function useContractFunction(contract, functionName, options) {\n  var _a, _b, _c;\n  const {\n    library,\n    chainId\n  } = useEthers();\n  const transactionChainId = options && 'chainId' in options && (options === null || options === void 0 ? void 0 : options.chainId) || chainId;\n  const {\n    promiseTransaction,\n    state,\n    resetState\n  } = usePromiseTransaction(transactionChainId, options);\n  const [events, setEvents] = useState(undefined);\n  const config = useConfig();\n  const gasLimitBufferPercentage = (_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.gasLimitBufferPercentage) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.bufferGasLimitPercentage) !== null && _b !== void 0 ? _b : config === null || config === void 0 ? void 0 : config.gasLimitBufferPercentage) !== null && _c !== void 0 ? _c : 0;\n  const providers = useReadonlyNetworks();\n  const provider = transactionChainId && providers[transactionChainId];\n  const send = useCallback(async (...args) => {\n    var _a;\n    if (contract) {\n      const numberOfArgs = contract.interface.getFunction(functionName).inputs.length;\n      const hasOpts = args.length > numberOfArgs;\n      if (args.length !== numberOfArgs && args.length !== numberOfArgs + 1) {\n        throw new Error(`Invalid number of arguments for function \"${functionName}\".`);\n      }\n      const signer = getSignerFromOptions(provider, options, library);\n      const contractWithSigner = connectContractToSigner(contract, options, signer);\n      const opts = hasOpts ? args[args.length - 1] : undefined;\n      const gasLimit = typeof opts === 'object' && Object.prototype.hasOwnProperty.call(opts, 'gasLimit') ? opts.gasLimit : (_a = await estimateContractFunctionGasLimit(contractWithSigner, functionName, args, gasLimitBufferPercentage)) !== null && _a !== void 0 ? _a : null;\n      const modifiedOpts = Object.assign({\n        gasLimit\n      }, opts);\n      const modifiedArgs = hasOpts ? args.slice(0, args.length - 1) : args;\n      const receipt = await promiseTransaction(contractWithSigner[functionName](...modifiedArgs, modifiedOpts), {\n        safeTransaction: {\n          to: contract.address,\n          value: opts === null || opts === void 0 ? void 0 : opts.value,\n          data: contract.interface.encodeFunctionData(functionName, modifiedArgs),\n          safeTxGas: gasLimit !== null && gasLimit !== void 0 ? gasLimit : undefined\n        }\n      });\n      if (receipt === null || receipt === void 0 ? void 0 : receipt.logs) {\n        const events = receipt.logs.reduce((accumulatedLogs, log) => {\n          try {\n            return log.address.toLowerCase() === contract.address.toLowerCase() ? [...accumulatedLogs, contract.interface.parseLog(log)] : accumulatedLogs;\n          } catch (_err) {\n            return accumulatedLogs;\n          }\n        }, []);\n        setEvents(events);\n      }\n      return receipt;\n    }\n  }, [contract, functionName, options, provider, library, gasLimitBufferPercentage, promiseTransaction]);\n  return {\n    send,\n    state,\n    events,\n    resetState\n  };\n}\n//# sourceMappingURL=useContractFunction.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}