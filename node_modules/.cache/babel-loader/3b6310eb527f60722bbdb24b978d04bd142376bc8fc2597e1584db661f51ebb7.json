{"ast":null,"code":"/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function chainStateReducer(state = {}, action) {\n  var _a, _b, _c;\n  const current = (_a = state[action.chainId]) === null || _a === void 0 ? void 0 : _a.blockNumber;\n  if (!current || action.blockNumber >= current) {\n    if (action.type === 'FETCH_SUCCESS') {\n      let newState = action.state;\n      // merge with existing state\n      const oldState = (_c = (_b = state[action.chainId]) === null || _b === void 0 ? void 0 : _b.state) !== null && _c !== void 0 ? _c : {};\n      for (const [address, entries] of Object.entries(oldState)) {\n        newState = Object.assign(Object.assign({}, newState), {\n          [address]: Object.assign(Object.assign({}, entries), newState[address])\n        });\n      }\n      return Object.assign(Object.assign({}, state), {\n        [action.chainId]: {\n          blockNumber: action.blockNumber,\n          state: newState\n        }\n      });\n    } else if (action.type === 'FETCH_ERROR') {\n      return Object.assign(Object.assign({}, state), {\n        [action.chainId]: Object.assign(Object.assign({}, state[action.chainId]), {\n          blockNumber: action.blockNumber,\n          error: action.error\n        })\n      });\n    }\n  }\n  return state;\n}\n//# sourceMappingURL=chainStateReducer.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}